CREATE DATABASE SAZ
ON PRIMARY
(NAME='SAZ_PRM',FILENAME='D:\SAZ.MDF',SIZE=6MB,MAXSIZE=100MB,FILEGROWTH=1MB),
FILEGROUP F1
(NAME='F1',FILENAME='D:\F1.NDF',SIZE=1MB,MAXSIZE=100MB,FILEGROWTH=1MB),
FILEGROUP F2
(NAME='F2',FILENAME='D:\F2.NDF',SIZE=1MB,MAXSIZE=100MB,FILEGROWTH=1MB),
FILEGROUP F3
(NAME='F3',FILENAME='D:\F3.NDF',SIZE=1MB,MAXSIZE=100MB,FILEGROWTH=1MB),
FILEGROUP F4
(NAME='F4',FILENAME='D:\F4.NDF',SIZE=1MB,MAXSIZE=100MB,FILEGROWTH=1MB),
FILEGROUP F5
(NAME='F5',FILENAME='D:\F5.NDF',SIZE=1MB,MAXSIZE=100MB,FILEGROWTH=1MB)
LOG ON
(NAME='SAZ_LOG',FILENAME='D:\SAZ_LOG.LDF',SIZE=1MB,MAXSIZE=10MB,FILEGROWTH=1MB)

GO
USE SAZ
GO
-------------------------创建架构-------------------------------------
CREATE SCHEMA HUMANRESOURCES
GO
CREATE SCHEMA SALES
GO
CREATE SCHEMA PRODUCTION
GO

--------------------------创建表---------------------------------------
CREATE TABLE HUMANRESOURCES.EMPLOYEE(
EMPLOYEEID CHAR(4) PRIMARY KEY NOT NULL  CHECK(EMPLOYEEID LIKE 'E%[0-9][0-9]'),
NAME VARCHAR(20) NOT NULL,
GENDER CHAR(1) NOT NULL  CONSTRAINT [CK_EMPLOYEE_GENDER] CHECK  ((UPPER([GENDER])='F' OR UPPER([GENDER])='M')),
BIRTHDATE DATETIME NOT NULL CONSTRAINT [CK_EMPLOYEE_BIRTHDATE] CHECK (YEAR(GETDATE())-YEAR(BIRTHDATE)>=22),
DEPARTMENTID CHAR(4),
TITLE VARCHAR(20),
PHONE VARCHAR(11) UNIQUE,
HIREDATE DATE,
RETIREYEAR INT,
)
GO

CREATE TABLE HUMANRESOURCES.EMPLOYEEPAYHISTORY(
EMPLOYEEID CHAR(4),
SALARYOFDATE CHAR(10),
SALARY MONEY DEFAULT(2000),
)
GO

CREATE TABLE HUMANRESOURCES.EMPLOYEEHISTORY(
EMPLOYEEID CHAR(4),
NAME NVARCHAR(20),
LEAVEDATE DATE,
)
GO


CREATE TABLE HUMANRESOURCES.DEPARTMENT(
DEPARTMENTID CHAR(4)  NOT NULL PRIMARY KEY  CHECK(DEPARTMENTID LIKE 'D[0-9][0-9][0-9]'),
NAME VARCHAR(20) NOT NULL,
)
GO

CREATE TABLE PRODUCTION.PRODUCT(
PRODUCTID CHAR(4) PRIMARY KEY  CHECK(PRODUCTID LIKE 'P[0-9][0-9][0-9]'),
PRODUCTNAME NVARCHAR(20),
CATEGORYID CHAR(4),
TECHNOLOGYINFORMATION NVARCHAR(200),
PRICE MONEY,
SUPPLIERID CHAR(4),
)
GO
CREATE TABLE PRODUCTION.CATEGORY(
CATEGORYID CHAR(4) PRIMARY KEY  CHECK(CATEGORYID LIKE 'C[0-9][0-9][0-9]'),
CATEGORYNAME NVARCHAR(20),
)
GO

CREATE TABLE PRODUCTION.SUPPER(
SUPPLIERID CHAR(4) PRIMARY KEY  CHECK(SUPPLIERID LIKE 'U[0-9][0-9][0-9]'),
SUPPERNAME NVARCHAR(20),
)
GO

CREATE TABLE PRODUCTION.PURCHASE(
PURCHASEPERSONID CHAR(4) CHECK(PURCHASEPERSONID LIKE 'EP[0-9][0-9]'),
PRODUCTID CHAR(4),
QUANTITY INT,
INVENTORYID CHAR(4)
)

GO
CREATE TABLE PRODUCTION.INVENTORY(
INVENTORYID CHAR(4) CHECK(INVENTORYID LIKE 'I[0-9][0-9][0-9]'),
PRODUCTID CHAR(4),
QUANTITY INT,
)
GO

CREATE TABLE SALES.CUSTOMER(
CUSTOMERID CHAR(4) NOT NULL PRIMARY KEY CHECK(CUSTOMERID LIKE 'C[0-9][0-9][0-9]'),
CUSTOMERNAME VARCHAR(30) NOT NULL,
CONTACTINFO CHAR(11) UNIQUE,
)
GO

CREATE TABLE SALES.SALESPERSON(
SALESPERSONID CHAR(4) NOT NULL CHECK(SALESPERSONID LIKE 'ES[0-9][0-9]'),
SALESDATE CHAR(7),
SALESOFMONTH INT DEFAULT(0),
)
GO

CREATE TABLE SALES.ORDERDETAILS(
ORDERID CHAR(4) NOT NULL PRIMARY KEY CHECK(ORDERID LIKE 'O[0-9][0-9][0-9]' ),
ORDERDATE DATE NOT NULL ,
PRODUCTID CHAR(4) NOT NULL,
PRICE MONEY ,
QUANTITY INT NOT NULL ,
TOTAL INT ,
SALESPERSONID CHAR(4) NOT NULL,
REGIONID CHAR(4) NOT NULL,
PAYMENTMODEID CHAR(1) NOT NULL,
INVENTORYID CHAR(4) NOT NULL CHECK(INVENTORYID LIKE 'I[0][0][0-8]'),
CUSTOMERID CHAR(4) NOT NULL
)
GO

CREATE TABLE SALES.REGION(
REGIONID CHAR(4) NOT NULL PRIMARY KEY CHECK(REGIONID LIKE 'R[0-9][0-9][[0-9]'),
REGIONNAME VARCHAR(20) NOT NULL ,
)
GO

CREATE TABLE SALES.REGIONSALES(
REGIONID CHAR(4) NOT NULL,
SALESYEAR CHAR(4),
AMOUNTOFYEAR INT,
)
GO

CREATE TABLE SALES.PAYMENTMODE(
PAYMENTMODEID CHAR(1) NOT NULL PRIMARY KEY,
PAYMENTMODE VARCHAR(20))
GO

--------------------------创建分区---------------------------------------
--创建分区函数
CREATE PARTITION FUNCTION  FUNC_ORDERDATE(DATE)
AS RANGE RIGHT FOR VALUES('2012-01-01','2013-01-01','2014-01-01','2015-01-01')
GO
--创建分区方案
CREATE PARTITION SCHEME  SCHEME_ORDERDATE
AS PARTITION FUNC_ORDERDATE TO (F1,F2,F3,F4,F5)
GO
--创建唯一索引
CREATE NONCLUSTERED INDEX IND_ORDERDATE ON SALES.ORDERDETAILS(ORDERDATE)
ON SCHEME_ORDERDATE(ORDERDATE)
GO
---------------------------------添加外键约束------------------------------
ALTER TABLE HUMANRESOURCES.EMPLOYEE  WITH CHECK ADD  CONSTRAINT 
FK_EMPLOYEE_DEPARTMENTID FOREIGN KEY(DEPARTMENTID)
REFERENCES HUMANRESOURCES.DEPARTMENT(DEPARTMENTID)
GO

ALTER TABLE HUMANRESOURCES.EMPLOYEEPAYHISTORY  WITH CHECK ADD  CONSTRAINT 
FK_EMPLOYEEPAYHISTORY_EMPID FOREIGN KEY(EMPLOYEEID)
REFERENCES HUMANRESOURCES.EMPLOYEE(EMPLOYEEID)
GO

ALTER TABLE PRODUCTION.PRODUCT  WITH CHECK ADD  CONSTRAINT FK_PRODUCT_SUPPLIERID 
FOREIGN KEY(SUPPLIERID)
REFERENCES PRODUCTION.SUPPER(SUPPLIERID)
GO

ALTER TABLE PRODUCTION.PRODUCT  WITH CHECK ADD  CONSTRAINT FK_PRODUCT_CATEGORYID 
FOREIGN KEY(CATEGORYID)
REFERENCES PRODUCTION.CATEGORY(CATEGORYID)
GO


ALTER TABLE PRODUCTION.INVENTORY  WITH CHECK ADD  CONSTRAINT 
FK_INVENTORY_PRODUCTID FOREIGN KEY(PRODUCTID)
REFERENCES PRODUCTION.PRODUCT(PRODUCTID)
GO

ALTER TABLE PRODUCTION.PURCHASE  WITH CHECK ADD  CONSTRAINT 
FK_PURCHASE_PURCHASEPERSONID FOREIGN KEY(PURCHASEPERSONID)
REFERENCES HUMANRESOURCES.EMPLOYEE(EMPLOYEEID)
GO

ALTER TABLE PRODUCTION.PURCHASE  WITH CHECK ADD  CONSTRAINT 
FK_PURCHASE_PRODUCTID FOREIGN KEY(PRODUCTID)
REFERENCES PRODUCTION.PRODUCT(PRODUCTID)
GO

ALTER TABLE SALES.REGIONSALES  WITH CHECK ADD  CONSTRAINT 
FK_REGIONSALES_RID FOREIGN KEY(REGIONID)
REFERENCES SALES.REGION(REGIONID)
GO


ALTER TABLE SALES.ORDERDETAILS  WITH CHECK ADD  CONSTRAINT FK_ORDERID_CUSTOMER FOREIGN 
KEY(CUSTOMERID)
REFERENCES SALES.CUSTOMER(CUSTOMERID)
GO


ALTER TABLE SALES.ORDERDETAILS  WITH CHECK ADD  CONSTRAINT 
FK_ORDERDETAILS_PRODUCTID FOREIGN KEY(PRODUCTID)
REFERENCES PRODUCTION.PRODUCT(PRODUCTID)
GO



ALTER TABLE SALES.ORDERDETAILS  WITH CHECK ADD  CONSTRAINT 
FK_ORDERDETAILS_PAYMENTMODEID FOREIGN KEY(PAYMENTMODEID)
REFERENCES SALES.PAYMENTMODE(PAYMENTMODEID)
GO

ALTER TABLE SALES.ORDERDETAILS  WITH CHECK ADD  CONSTRAINT 
FK_ORDERDETAILS_SALESPERSON FOREIGN KEY(SALESPERSONID)
REFERENCES HUMANRESOURCES.EMPLOYEE(EMPLOYEEID) 
GO


ALTER TABLE SALES.SALESPERSON  WITH CHECK ADD  CONSTRAINT FK_SALESPERSON_EMPLOYEEID FOREIGN 
KEY(SALESPERSONID)
REFERENCES HUMANRESOURCES.EMPLOYEE(EMPLOYEEID)
GO

ALTER TABLE SALES.ORDERDETAILS  WITH CHECK ADD  CONSTRAINT 
FK_ORDERDETAILS_REGION FOREIGN KEY(REGIONID)
REFERENCES SALES.REGION(REGIONID)
GO

--------------------------------------触发器-------------------------------
--员工表  插入触发器
--当添加员工时 自动根据其年龄和职位 计算并更新员工表
CREATE TRIGGER EMLOYEE_RETAIL ON HUMANRESOURCES.EMPLOYEE
FOR INSERT
AS
BEGIN
DECLARE @AGE INT
DECLARE @EMPID CHAR(4)
DECLARE @TITLE VARCHAR(20)
DECLARE @REAGE INT 

SELECT @EMPID=EMPLOYEEID FROM inserted
SELECT  @TITLE=TITLE FROM inserted
SELECT @AGE=CONVERT(INT,(YEAR(GETDATE())-YEAR(BIRTHDATE))) FROM inserted

IF(@TITLE='CLERK')
BEGIN
SET @REAGE=65
UPDATE EMPLOYEE SET RETIREYEAR=(CONVERT(INT,YEAR(GETDATE())+(@REAGE-@AGE))) WHERE EMPLOYEEID=@EMPID
END

IF(@TITLE='MANAGER')
BEGIN
SET @REAGE=60
UPDATE EMPLOYEE SET RETIREYEAR=(CONVERT(INT,YEAR(GETDATE())+(@REAGE-@AGE))) WHERE EMPLOYEEID=@EMPID
END

IF(@TITLE='SALESPERSON')
BEGIN
SET @REAGE=50
UPDATE EMPLOYEE SET RETIREYEAR=(CONVERT(INT,YEAR(GETDATE())+(@REAGE-@AGE))) WHERE EMPLOYEEID=@EMPID
END
END

GO

--员工历史表  替代触发器
--当员工离职时 自动添加到员工历史表中
--删除员工表中员工的记录
--删除薪水历史表中员工的记录

CREATE TRIGGER EMPLOYEE_HISTORY ON HUMANRESOURCES.EMPLOYEE INSTEAD OF DELETE
AS BEGIN

ALTER TABLE HUMANRESOURCES.EMPLOYEEPAYHISTORY
NOCHECK CONSTRAINT FK_EMPLOYEEPAYHISTORY_EMPID

DECLARE @EMPID CHAR(4)
DECLARE @NAME VARCHAR(20)
SELECT @EMPID=EMPLOYEEID FROM DELETED
SELECT @NAME=NAME FROM DELETED
INSERT INTO HUMANRESOURCES.EMPLOYEEHISTORY VALUES (@EMPID,@NAME,GETDATE() )
DELETE HUMANRESOURCES.EMPLOYEE WHERE EMPLOYEEID=@EMPID
DELETE HUMANRESOURCES.EMPLOYEEPAYHISTORY WHERE EMPLOYEEID=@EMPID

ALTER TABLE HUMANRESOURCES.EMPLOYEEPAYHISTORY
CHECK CONSTRAINT FK_EMPLOYEEPAYHISTORY_EMPID
END
GO


--员工工资历史表  插入触发器
--当添加员时 填充从入职到当前日期的工资历史到员工工资历史表
CREATE TRIGGER EMPLOYEE_SALARY ON HUMANRESOURCES.EMPLOYEE FOR INSERT
AS BEGIN
DECLARE @EMPID CHAR(4)
DECLARE @HIREYEAR INT
DECLARE @HIREMONTH INT 
DECLARE @SYSYEAR INT 
DECLARE @SYSMONTH INT 
SELECT @EMPID=EMPLOYEEID FROM INSERTED
SELECT @HIREYEAR=year(hiredate) FROM INSERTED
SELECT @HIREMONTH=month(hiredate) FROM INSERTED
SET @SYSYEAR=year(getdate())
SET @SYSMONTH=month(getdate())

DECLARE @I INT 
DECLARE @H INT
SET @I=@HIREMONTH
SET @H=@HIREYEAR

WHILE(@H<@SYSYEAR)
BEGIN
WHILE(@I<12)
BEGIN
INSERT INTO EmployeePayHistory(EmployeeID,SALARYOFDATE) VALUES(@EMPID,(CONVERT(VARCHAR,@H)+'/'+CONVERT(VARCHAR,(@I+1))))
SET @I=@I+1
END
SET @H=@H+1
SET @I=0
END
DECLARE @M INT 
SET @M=@HIREMONTH
WHILE(@H=@SYSYEAR)
BEGIN 
WHILE(@M<@SYSMONTH)
BEGIN
INSERT INTO EmployeePayHistory(EmployeeID,SALARYOFDATE) VALUES(@EMPID,(CONVERT(VARCHAR,@H)+'/'+CONVERT(VARCHAR,@M)))
SET @M=@M+1
END
SET @H=@H+1
END
END

GO

--订单表 插入触发器
--当有订单生成时  根据产品编号、数量 填充订单表中的产品单价 订单总额
--根据产品编号、数量、仓库编号  判断库存是否充足 充足时更新仓库中产品的数量 不足时 报错 回滚事物
--根据销售人员、订单总额 更新销售人员表中的数据
--根据销售地区、销售年份 更新地区表

CREATE TRIGGER ORDERDETAILS_PRODUCT ON SALES.ORDERDETAILS FOR INSERT
AS BEGIN
DECLARE @OID CHAR(4)
DECLARE @PRICE MONEY
DECLARE @PRODUCTID CHAR(4)
DECLARE @QUANTITY INT
DECLARE @DATE DATE
DECLARE @OLDAMOUNTYEAR MONEY
DECLARE @REGIONID CHAR(4)
DECLARE @INVENTORYID CHAR(4)
DECLARE @OLDQUANTITY  INT
DECLARE @SALESPERSONID CHAR(4)
DECLARE @MONTH VARCHAR(8)
DECLARE @SALESOFMONTH INT

SELECT @OID=ORDERID FROM INSERTED
SELECT @REGIONID=REGIONID FROM INSERTED
SELECT @PRODUCTID=PRODUCTID FROM INSERTED
SELECT @QUANTITY=QUANTITY FROM INSERTED
SELECT @INVENTORYID=INVENTORYID  FROM INSERTED
SELECT @SALESPERSONID=SALESPERSONID FROM INSERTED
SELECT @REGIONID=REGIONID FROM INSERTED
SELECT @DATE=ORDERDATE FROM INSERTED
SELECT @PRICE =PRICE FROM PRODUCTION.PRODUCT WHERE @PRODUCTID=PRODUCTID
SELECT @OLDAMOUNTYEAR=AMOUNTOFYEAR FROM SALES.REGIONSALES
SELECT @OLDQUANTITY=QUANTITY FROM PRODUCTION.INVENTORY  WHERE PRODUCTID=@PRODUCTID AND INVENTORYID=@INVENTORYID
SET @MONTH=CONVERT(VARCHAR,DATEPART(YY,@DATE))+'/'+CONVERT(VARCHAR,DATEPART(MM,@DATE))
SELECT @SALESOFMONTH=SALESOFMONTH FROM SALESPERSON WHERE SALESDATE=@MONTH

IF(@OLDQUANTITY>=@QUANTITY)
BEGIN
UPDATE SALES.ORDERDETAILS SET PRICE=@PRICE WHERE  PRODUCTID=@PRODUCTID AND ORDERID=@OID
UPDATE SALES.ORDERDETAILS SET TOTAL=(@PRICE* @QUANTITY) WHERE  PRODUCTID=@PRODUCTID AND ORDERID=@OID
UPDATE SALES.REGIONSALES SET AMOUNTOFYEAR=(@OLDAMOUNTYEAR+(@PRICE* @QUANTITY)) WHERE REGIONID=@REGIONID AND SALESYEAR=YEAR(@DATE)
UPDATE PRODUCTION.INVENTORY SET QUANTITY=@OLDQUANTITY-@QUANTITY WHERE PRODUCTID=@PRODUCTID AND INVENTORYID=@INVENTORYID
IF EXISTS(SELECT * FROM SALES.SALESPERSON WHERE SALESPERSONID=@SALESPERSONID AND SALESDATE=@MONTH)
BEGIN
SELECT @SALESOFMONTH=SALESOFMONTH FROM SALESPERSON WHERE SALESDATE=@MONTH
UPDATE SALES.SALESPERSON SET SALESOFMONTH=(@SALESOFMONTH+(@PRICE* @QUANTITY)) WHERE SALESDATE=@MONTH
END
ELSE
BEGIN
INSERT INTO SALESPERSON VALUES(@SALESPERSONID,@MONTH,(@PRICE* @QUANTITY))
END
END
ELSE 
BEGIN
PRINT('库存不足,无法下单！！！')
ROLLBACK TRAN
END
END
GO

--销售人员薪水  更新触发器
--当销售人员的销售额更新时  更新销售人员当月的薪水

CREATE TRIGGER SALESPERSON_SALARY ON SALES.SALESPERSON 
FOR UPDATE AS
BEGIN
DECLARE @DATE CHAR(8)
DECLARE @SUM INT
DECLARE @PID CHAR(4)
DECLARE @NEWSA INT 
SELECT @PID=SALESPERSONID,@DATE=SALESDATE,@SUM=SALESOFMONTH FROM INSERTED

IF(@SUM<5000)
BEGIN
SET @NEWSA=(2000+@SUM*0.02)
UPDATE HUMANRESOURCES.EMPLOYEEPAYHISTORY SET SALARY=@NEWSA WHERE EMPLOYEEID=@PID AND SALARYOFDATE=@DATE
END

IF(@SUM<=5000 AND @SUM<=6000)
BEGIN
SET @NEWSA=(2000+@SUM*0.05)
UPDATE HUMANRESOURCES.EMPLOYEEPAYHISTORY SET SALARY=@NEWSA WHERE EMPLOYEEID=@PID AND SALARYOFDATE=@DATE
END

IF(@SUM>6000 AND @SUM <=10000)
BEGIN
SET @NEWSA=(2000+@SUM*0.08)
UPDATE HUMANRESOURCES.EMPLOYEEPAYHISTORY SET SALARY=@NEWSA WHERE EMPLOYEEID=@PID AND SALARYOFDATE=@DATE
END

IF(@SUM>10000)
BEGIN
SET @NEWSA=(2000+@SUM*0.1)
UPDATE HUMANRESOURCES.EMPLOYEEPAYHISTORY SET SALARY=@NEWSA WHERE EMPLOYEEID=@PID AND SALARYOFDATE=@DATE
END

END
GO


--仓库-产品 更新触发器 
--当仓库的某个产品的数量小于300时，向采购人员发出订单需求 并更新采购列表
CREATE TRIGGER INV_PRODUCT ON  PRODUCTION.INVENTORY
FOR UPDATE AS
BEGIN
DECLARE @QUAN INT
SELECT @QUAN=QUANTITY FROM INSERTED
DECLARE @NUM INT
SET @NUM=300
IF(@QUAN<@NUM)
BEGIN
DECLARE @PID CHAR(4)
DECLARE @INV CHAR(4)
DECLARE @DATE DATE
SELECT @PID=PRODUCTID FROM INSERTED
SELECT @INV=INVENTORYID FROM INSERTED
DECLARE @NQ INT
DECLARE @PUID CHAR(4)
DECLARE @EP INT
SET @NQ=(RAND()*500+300)
SET @EP=CONVERT(INT,(RAND()*10))%5+1
SET @PUID='EP0'+CONVERT(CHAR(1),@EP)
INSERT INTO PRODUCTION.PURCHASE VALUES(@PUID,@PID,@NQ,@INV)
END

END

GO

--采购表  插入触发器
--当添加采购记录时 更新指定仓库中指定产品的数量

CREATE TRIGGER INVENTORY_PURCHASE ON PRODUCTION.PURCHASE
FOR INSERT
AS BEGIN
DECLARE @INVENTORYID CHAR(4)
DECLARE @PRODUCTID CHAR(4)
DECLARE @QUANTITY INT
DECLARE @OLDQUAN INT
DECLARE @NEWQUAN INT 
SELECT @INVENTORYID=INVENTORYID,@PRODUCTID=PRODUCTID,@QUANTITY=QUANTITY FROM INSERTED
SELECT @OLDQUAN=QUANTITY FROM PRODUCTION.INVENTORY WHERE INVENTORYID=@INVENTORYID AND PRODUCTID=@PRODUCTID
SET @NEWQUAN=@OLDQUAN+@QUANTITY
UPDATE  PRODUCTION.INVENTORY
SET QUANTITY=@NEWQUAN FROM PRODUCTION.INVENTORY WHERE INVENTORYID=@INVENTORYID AND PRODUCTID=@PRODUCTID
END
GO

----------------------------------------插入数据----------------------------

INSERT INTO HUMANRESOURCES.DEPARTMENT VALUES('D001','SALES')
INSERT INTO HUMANRESOURCES.DEPARTMENT VALUES('D002','MARKETING')
INSERT INTO HUMANRESOURCES.DEPARTMENT VALUES('D003','PURCHASING')
INSERT INTO HUMANRESOURCES.DEPARTMENT VALUES('D004','ENGINEERING')
INSERT INTO HUMANRESOURCES.DEPARTMENT VALUES('D005','INFORMATION')
INSERT INTO HUMANRESOURCES.DEPARTMENT VALUES('D006','HUMANRESOURCES')


INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('ES01','CSC','M','19910209','D001','MANAGER ','18800118888','20110606',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('ES02','JANE','F','19920919','D001','SALESPERSON ','18800117777','20111010',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('ES03','JULIE','F','19800929','D001','SALESPERSON','18800116666','20110606',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('ES04','PERCY','M','19800409','D001','SALESPERSON','18800115555','20110515',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('ES05','LILITH','F','19870605','D001','SALESPERSON','18600114444','20110306',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('ES06','ZION','M','19880707','D001','SALESPERSON','18600115555','20110515',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('ES07','SAM','F','19890303','D001','SALESPERSON','18600144444','20110306',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('ES08','REACHARD','M','19780109','D001','SALESPERSON','15600115555','20110515',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('ES09','JACK','F','19750302','D001','SALESPERSON','15600114444','20110306',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('ES10','HAHA','M','19890605','D001','SALESPERSON','18500115555','20110515',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EM01','ADAM','M','19800909','D002','MANAGER','18800113333','20120603',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EM02','BERT','M','19820909','D002','CLERK','18800112222','20110602',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EM03','MARY','F','19840909','D002','CLERK','18800111111','20130606',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EM04','BOB','M','19870909','D002','CLERK','18800111234','20111106',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EM05','GILL','F','19880909','D002','CLERK','18800115678','20140605',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EP01','MARINA','F','19780909','D003','MANAGER','18800112345','20140606',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EP02','HEDY','F','19770909','D003','CLERK','18800015678','20131205',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EP03','CAESAR','M','19870909','D003','CLERK','18800117890','20140604',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EP04','CLARE','M','19820909','D003','CLERK','18800119876','20150308',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EP05','EARTHA','F','19710909','D003','CLERK','18800118765','20140504',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EE01','DAVID','M','19910909','D004','MANAGER','18800115432','20140406',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EE02','DICK','M','19910909','D004','CLERK','18200114321','20140704',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EE03','ESTHER','F','19910909','D004','CLERK','16800112233','20140811',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EE04','FELIX','M','19890909','D004','CLERK','18100116344','20150215',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EE05','GODFERY','M','19900909','D004','CLERK','18800115566','20130406',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EI01','CYNTHIA','F','19760909','D005','MANAGER','18800116677','20140625',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EI02','HUGO','M','19830909','D005','CLERK','18800117788','20130725',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EI03','HERMAN','M','19850909','D005','CLERK','18800118899','20130806',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EI04','DALE','F','19830909','D005','CLERK','18800119988','20130925',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EI05','CHERRY','F','19840909','D005','CLERK','18800118877','20131006',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EH01','JACOB','M','19880909','D006','MANAGER','18800117766','20130615',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EH02','BARBARA','F','19880909','D006','CLERK','18800116655','20130301',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EH03','JAY','M','19910909','D006','CLERK','18800115544','20140507',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EH04','JOHN','M','19900909','D006','CLERK','18800113322','20140306',NULL)
INSERT INTO HUMANRESOURCES.EMPLOYEE VALUES('EH05','LES','F','19900909','D006','CLERK','18800112211','20140107',NULL)

INSERT INTO PRODUCTION.SUPPER VALUES('U001','华为')
INSERT INTO PRODUCTION.SUPPER VALUES('U002','三星')
INSERT INTO PRODUCTION.SUPPER VALUES('U003','日立')
INSERT INTO PRODUCTION.SUPPER VALUES('U004','D-LINK')
INSERT INTO PRODUCTION.SUPPER VALUES('U005','IBM')

INSERT INTO PRODUCTION.CATEGORY VALUES('C001','圆顶闭路电视摄像头')
INSERT INTO PRODUCTION.CATEGORY VALUES('C002','数字视频录象机')
INSERT INTO PRODUCTION.CATEGORY VALUES('C003','无线摄像头')
INSERT INTO PRODUCTION.CATEGORY VALUES('C004','烟雾报警器')
INSERT INTO PRODUCTION.CATEGORY VALUES('C005','探测器')
INSERT INTO PRODUCTION.CATEGORY VALUES('C006','中央控制系统')
INSERT INTO PRODUCTION.CATEGORY VALUES('C007','磁盘阵列')

INSERT INTO PRODUCTION.PRODUCT VALUES('P001','STORWIZE V5000','C007','允许在系统之间同步或异步地复制数据以提高备份效率','1499','U005')
INSERT INTO PRODUCTION.PRODUCT VALUES('P002','TL-SC3171','C001','内置12个红外灯，即便光线较暗的夜晚，通过开启红外灯仍可实现监控，监控更有保障','998','U004')
INSERT INTO PRODUCTION.PRODUCT VALUES('P003','SCC-B2328P','C001','宽动态范围是普通摄像机的160倍，可消除图像中的物体光暗度反差过大的现象','1250','U002')
INSERT INTO PRODUCTION.PRODUCT VALUES('P004','DH-DVR5116HE','C002','用DAHUA云台控制协议时，可以通过鼠标实现三维智能定位功能','699','U003')
INSERT INTO PRODUCTION.PRODUCT VALUES('P005','CVC Y01','C004','报警灵敏度：1级,监视面积：20平方米,消耗功率：监视状态＜20UA','189','U004')
INSERT INTO PRODUCTION.PRODUCT VALUES('P006','DS950-CHI','C005','以微处理器CPU为基础的三技术被动红外/微波探测器，可消除宠物引起的误报','328','U005')
INSERT INTO PRODUCTION.PRODUCT VALUES('P007','VICOM CX-320','C006','6路音频输入 VICOM CX-320其他输入端口：2路VGA输入,2路计算机输入端口','521','U001')
INSERT INTO PRODUCTION.PRODUCT VALUES('P008','DVR-PH4108AV','C002','H.264压缩格式,200帧/秒实','1699','U005')
INSERT INTO PRODUCTION.PRODUCT VALUES('P009','SSC-DC488P','C001','采用SUPER HAD CCD技术，带来了高品质图像和大于50DB的信噪比','1299','U001')
INSERT INTO PRODUCTION.PRODUCT VALUES('P010','JTY-GD-930','C005','数据时时采样、并智能判断，主动上报控制器','269','U003')

GO
--遍历插入每个仓库中每个产品的数量 
DECLARE @I INT
DECLARE @P INT 
DECLARE @IID CHAR(4)
DECLARE @PID CHAR(4)
SET @I=1
SET @P=1
WHILE (@I<6)
BEGIN
SET @IID='I00'+CONVERT(CHAR(1),@I)
WHILE (@P<11)
BEGIN
IF(@P<10)
BEGIN
SET @PID='P00'+CONVERT(CHAR(1),@P)
END
ELSE 
BEGIN
SET @PID='P0'+CONVERT(CHAR(2),@P)
END
INSERT INTO PRODUCTION.INVENTORY VALUES(@IID,@PID,RAND()*500+300)
SET @P=@P+1
END
SET @P=1
SET @I=@I+1
END

GO


INSERT INTO SALES.REGION VALUES('R001','QINGDAO')
INSERT INTO SALES.REGION VALUES('R002','BEIJING')
INSERT INTO SALES.REGION VALUES('R003','SHENZHEN')
INSERT INTO SALES.REGION VALUES('R004','XIANGGANG')
INSERT INTO SALES.REGION VALUES('R005','HANGZHOU')
INSERT INTO SALES.REGION VALUES('R006','SHANGHAI')
INSERT INTO SALES.REGION VALUES('R007','HAERBIN')
INSERT INTO SALES.REGION VALUES('R008','NANJING')

GO
DECLARE @RID CHAR(4)
DECLARE @I INT
DECLARE @YEAR INT
SET @I=1
SET @YEAR=2012
WHILE @I<9
BEGIN
SET @RID='R00'+CONVERT(CHAR(1),@I)
WHILE @YEAR<=(YEAR(GETDATE()))
BEGIN
INSERT INTO SALES.REGIONSALES VALUES (@RID,@YEAR,'0')
SET @YEAR+=1
END
SET @I+=1
SET @YEAR=2012
END

GO

INSERT INTO SALES.PAYMENTMODE VALUES('1','CASH')
INSERT INTO SALES.PAYMENTMODE VALUES('2','CHEQUE')
INSERT INTO SALES.PAYMENTMODE VALUES('3','CREDITCARD')

INSERT INTO SALES.CUSTOMER VALUES('C001','DREW','15688661122')
INSERT INTO SALES.CUSTOMER VALUES('C002','DWIGHT','15688666622')
INSERT INTO SALES.CUSTOMER VALUES('C003','ELROY','15688661199')
INSERT INTO SALES.CUSTOMER VALUES('C004','GALE','15688661134')
INSERT INTO SALES.CUSTOMER VALUES('C005','JEFFREY ','15688661145')
INSERT INTO SALES.CUSTOMER VALUES('C006','LEO','15688661156')
INSERT INTO SALES.CUSTOMER VALUES('C007','FABIAN','15688661176')
INSERT INTO SALES.CUSTOMER VALUES('C008','KELLY','15688661187')
INSERT INTO SALES.CUSTOMER VALUES('C009','HOGAN','15688661245')
INSERT INTO SALES.CUSTOMER VALUES('C010','GREG ','15688661432')

--随机插入订单数据  存储过程
GO
CREATE PROC INS AS
BEGIN
DECLARE @OID CHAR(4)
DECLARE @ID INT
DECLARE @DATE DATE
DECLARE @YEAR INT
DECLARE @MONTH INT 
DECLARE @MONTHS INT 
DECLARE @DAY  INT
DECLARE @D CHAR(10)
DECLARE @PID CHAR(4)
DECLARE @QUAN INT
DECLARE @SID CHAR(4)
DECLARE @PAY CHAR(1)
DECLARE @RID CHAR(4)
DECLARE @IID CHAR(4)
DECLARE @CID CHAR(4)
DECLARE @I INT

SELECT @ID=MAX(CONVERT(INT,RIGHT(ORDERID,3)))+1 FROM SALES.ORDERDETAILS
IF(@ID IS NULL)
BEGIN 
SET @ID=1
END
IF(@ID<10)
BEGIN
SET @OID='O00'+CONVERT(CHAR(1),@ID)
END
IF(@ID>9 AND @ID<100)
BEGIN
SET @OID='O0'+CONVERT(CHAR(2),@ID)
END
IF(@ID>99 AND @ID<1000)
BEGIN
SET @OID='O'+CONVERT(CHAR(3),@ID)
END

SET @YEAR=2012+CONVERT(INT ,(RAND()*10)) %4
SET @MONTH=CONVERT(INT,(RAND()*100))%12+1
SET @MONTHS=CONVERT(INT,(RAND()*100))%5+1
SET @DAY=CONVERT(INT,(RAND()*100))%28+1
IF(@YEAR<2015)
BEGIN
SET @D=CONVERT(CHAR(4),@YEAR)+'-'+CONVERT(CHAR(2),@MONTH)+'-'+CONVERT(CHAR(2),@DAY)
END
ELSE
BEGIN
SET @D=CONVERT(CHAR(4),@YEAR)+'-'+CONVERT(CHAR(2),@MONTHS)+'-'+CONVERT(CHAR(2),@DAY)
END
SET @DATE=PARSE(@D AS DATE)

SET @I=CONVERT(INT,(RAND()*100))%10+1
IF(@I<10)
SET @PID='P00'+CONVERT(CHAR(1),@I)
ELSE 
SET @PID='P0'+CONVERT(CHAR(2),@I)

SET @QUAN=(RAND()*100+1)

SET @I=RAND()*10+1
IF(@I<10)
SET @SID='ES0'+CONVERT(CHAR(1),@I)
ELSE
SET @SID='ES'+CONVERT(CHAR(2),@I)

SET @I=CONVERT(INT,(RAND()*100))%8+1
SET @RID='R00'+CONVERT(CHAR(1),@I)

SET @I= CONVERT(INT,(RAND()*10))%3+1
SET @PAY=CONVERT(CHAR(1),@I)

SET @I= CONVERT(INT,(RAND()*10))%5+1
SET @IID='I00'+CONVERT(CHAR(1),@I)

SET @I=CONVERT(INT,(RAND()*100))%10+1
IF(@I<10)
SET @CID='C00'+CONVERT(CHAR(1),@I)
ELSE 
SET @CID='C0'+CONVERT(CHAR(2),@I)
INSERT INTO SALES.ORDERDETAILS VALUES(@OID,@DATE,@PID,'',@QUAN,'',@SID,@RID,@PAY,@IID,@CID)
END
GO

--执行存储过程 插入500条数据
DECLARE @I INT
SET @I=1
WHILE @I<=500
BEGIN
EXEC INS
SET @I+=1
END

GO


--------------------------------删除示例员工-------------------------------

DELETE HUMANRESOURCES.EMPLOYEE WHERE EMPLOYEEID='EI03'
DELETE HUMANRESOURCES.EMPLOYEE WHERE EMPLOYEEID='EH04'
DELETE HUMANRESOURCES.EMPLOYEE WHERE EMPLOYEEID='EE05'

---------------------------------创建索引----------------------------------

CREATE NONCLUSTERED INDEX EMP_PAY_EMPID ON HUMANRESOURCES.EMPLOYEEPAYHISTORY(EMPLOYEEID) 

CREATE NONCLUSTERED INDEX EMP_PAY_EMPID_DATE ON HUMANRESOURCES.EMPLOYEEPAYHISTORY(EMPLOYEEID,SALARYOFDATE) 

CREATE NONCLUSTERED INDEX INVEN_INID ON PRODUCTION.INVENTORY(INVENTORYID)

CREATE NONCLUSTERED INDEX INVEN_PID ON PRODUCTION.INVENTORY(PRODUCTID)

CREATE NONCLUSTERED INDEX INVEN_INID_PID ON PRODUCTION.INVENTORY(INVENTORYID,PRODUCTID)

CREATE NONCLUSTERED INDEX ORDER_PSID_DATE ON SALES.ORDERDETAILS(SALESPERSONID,ORDERDATE)

CREATE NONCLUSTERED INDEX ORDER_PID ON SALES.ORDERDETAILS(PRODUCTID)

CREATE NONCLUSTERED INDEX ORDER_PSID ON SALES.ORDERDETAILS(SALESPERSONID)

CREATE NONCLUSTERED INDEX ORDER_CID ON SALES.ORDERDETAILS(CUSTOMERID)

CREATE NONCLUSTERED INDEX SP_ID ON SALES.SALESPERSON(SALESPERSONID)

CREATE NONCLUSTERED INDEX SP_ID_DATE ON SALES.SALESPERSON(SALESPERSONID,SALESDATE)

GO

GO
-----------------------------存储过程（生成报告）------------------------------
--REPORT1
--查看月平均销售额，月销售总额 

CREATE PROC RP1 AS 
BEGIN
SELECT SUM(TOTAL)/COUNT(CONVERT(CHAR(4),YEAR(ORDERDATE))+CONVERT(CHAR(2),MONTH(ORDERDATE))) AS '月平均销售额',SUM(TOTAL) AS '月销售总额' FROM  SALES.ORDERDETAILS
END
GO

--REPORT 2
--查看销售的产品品目中，销售额最高，最低的产品的汇总报告 

CREATE PROC RP2 AS
SELECT P.PRODUCTID AS '销售额最高的产品编号',P.PRODUCTNAME AS '产品名称',S.SUMQUANTITY AS '销售总量',S.SUMTOTAL AS '销售总额' FROM 
(SELECT  PRODUCTID,PRODUCTNAME  FROM PRODUCTION.PRODUCT)  AS P
INNER JOIN
(SELECT TOP 1 S.PRODUCTID  ,(SUM(S.TOTAL)) AS SUMTOTAL ,SUM(S.QUANTITY) AS SUMQUANTITY FROM SALES.ORDERDETAILS  S JOIN PRODUCTION.PRODUCT P ON S.PRODUCTID=P.PRODUCTID  GROUP BY S.PRODUCTID ORDER BY SUM(TOTAL) DESC)
 AS S
 ON S.PRODUCTID=P.PRODUCTID
 SELECT P.PRODUCTID AS '销售额最低的产品编号',P.PRODUCTNAME AS '产品名称',S.SUMQUANTITY AS '销售总量',S.SUMTOTAL AS '销售总额' FROM 
(SELECT  PRODUCTID,PRODUCTNAME  FROM PRODUCTION.PRODUCT)  AS P
INNER JOIN
(SELECT TOP 1 S.PRODUCTID  ,(SUM(S.TOTAL)) AS SUMTOTAL ,SUM(S.QUANTITY) AS SUMQUANTITY FROM SALES.ORDERDETAILS  S JOIN PRODUCTION.PRODUCT P ON S.PRODUCTID=P.PRODUCTID  GROUP BY S.PRODUCTID ORDER BY SUM(TOTAL) ASC)
 AS S
 ON S.PRODUCTID=P.PRODUCTID
 GO

 --REPORT 3
 --查看每个产品指定年份或月份的销售报

CREATE PROC RP3 @YEAR INT, @MONTH INT
AS 
BEGIN;
IF EXISTS (SELECT * FROM SALES.ORDERDETAILS WHERE YEAR(ORDERDATE)=@YEAR AND MONTH(ORDERDATE)=@MONTH)
BEGIN
WITH CTE(PRODUCTID,TOTAL,QUANTIRY) AS
(SELECT PRODUCTID,TOTAL,QUANTITY  FROM SALES.ORDERDETAILS WHERE YEAR(ORDERDATE)=@YEAR AND MONTH(ORDERDATE)=@MONTH)
SELECT PRODUCTID AS '产品',SUM(QUANTIRY) AS '销售总量',SUM(TOTAL) AS '销售总额' FROM CTE GROUP BY PRODUCTID
END
ELSE
PRINT '没有销售记录！！！'
END

GO

--REPORT 4
--查看每个产品的每月销售报告，同时显示年销售总额 

CREATE PROC RP4 AS 
BEGIN
CREATE TABLE SSS(
PID CHAR(4),
SALESDATE CHAR(8),
QUANTITY INT,
TOTAL INT
)
CREATE TABLE YYY(
PID CHAR(4),
YYEAR INT,
SUMTOTAL INT
)

DECLARE @YEAR INT 
DECLARE @MONTH INT 
DECLARE @COUNT INT 
DECLARE @I INT 
DECLARE @PID CHAR(4)
DECLARE @SUMTOTAL INT 
DECLARE @QUANTITY INT
DECLARE @YSUM INT
SELECT @COUNT=COUNT(PRODUCTID) FROM PRODUCTION.PRODUCT
SELECT @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
SET @MONTH=1
SET @I=1
SET @PID='P001'
SET @SUMTOTAL=0
SET @QUANTITY=0
WHILE(@I<=@COUNT)
BEGIN
WHILE(@YEAR<YEAR(GETDATE()))
BEGIN
WHILE(@MONTH<=12)
BEGIN
WITH CSC(TOTAL,QUANTITY) AS(
SELECT TOTAL,QUANTITY FROM SALES.ORDERDETAILS WHERE PRODUCTID=@PID AND YEAR(ORDERDATE)=@YEAR AND MONTH(ORDERDATE)=@MONTH )
SELECT @SUMTOTAL=SUM(TOTAL), @QUANTITY=SUM(QUANTITY) FROM CSC
INSERT INTO SSS VALUES (@PID,CONVERT(CHAR(4),@YEAR)+'/'+CONVERT(VARCHAR(2),@MONTH),@QUANTITY,@SUMTOTAL)
SET @MONTH=@MONTH+1
END
SET @YEAR=@YEAR+1
SET @MONTH=1
END
SELECT @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
SET @I=@I+1
IF(@I<10)
SET @PID='P00'+CONVERT(CHAR(1),@I)
IF(@I>9 AND @I<=99)
SET @PID='P0'+CONVERT(CHAR(2),@I)
IF(@I>99 AND @I<999)
SET @PID='P'+CONVERT(CHAR(3),@I)
END
SET @MONTH=1
SET @I=1
SET @PID='P001'
WHILE(@I<=@COUNT)
BEGIN
WHILE(@YEAR=YEAR(GETDATE()))
BEGIN
WHILE(@MONTH<MONTH(GETDATE()))
BEGIN
WITH CSC(TOTAL,QUANTITY) AS(
SELECT TOTAL,QUANTITY FROM SALES.ORDERDETAILS WHERE PRODUCTID=@PID AND YEAR(ORDERDATE)=@YEAR AND MONTH(ORDERDATE)=@MONTH )
SELECT @SUMTOTAL=SUM(TOTAL),@QUANTITY=SUM(QUANTITY) FROM CSC
INSERT INTO SSS VALUES (@PID,CONVERT(CHAR(4),@YEAR)+'/'+CONVERT(VARCHAR(2),@MONTH),@QUANTITY,@SUMTOTAL)
SET @MONTH=@MONTH+1
END
SET @YEAR=@YEAR+1
SET @MONTH=1
END
SELECT @YEAR=YEAR(GETDATE()) FROM SALES.ORDERDETAILS
SET @I=@I+1
IF(@I<10)
SET @PID='P00'+CONVERT(CHAR(1),@I)
IF(@I>9 AND @I<=99)
SET @PID='P0'+CONVERT(CHAR(2),@I)
IF(@I>99 AND @I<999)
SET @PID='P'+CONVERT(CHAR(3),@I)
END
SELECT PID AS '产品编号',SALESDATE AS '销售年月',QUANTITY AS '销售总量', TOTAL AS '销售总额' FROM SSS
SET @PID='P001'
SET @I=1
WHILE(@I<=@COUNT)
BEGIN
SELECT @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
WHILE(@YEAR<=YEAR(GETDATE()))
BEGIN
;WITH HHH(TOTAL) AS
(SELECT TOTAL FROM SSS  WHERE PID=@PID AND CONVERT(INT,LEFT(SALESDATE,4))=@YEAR)
SELECT @YSUM=SUM(TOTAL) FROM HHH 
INSERT INTO YYY VALUES (@PID,@YEAR,@YSUM)
SET @YEAR=@YEAR+1
END
SET @I=@I+1
IF(@I<10)
SET @PID='P00'+CONVERT(CHAR(1),@I)
IF(@I>9 AND @I<=99)
SET @PID='P0'+CONVERT(CHAR(2),@I)
IF(@I>99 AND @I<999)
SET @PID='P'+CONVERT(CHAR(3),@I)
END
SELECT PID AS '产品编号', YYEAR AS '销售年份',SUMTOTAL AS '销售总额' FROM YYY
DROP TABLE SSS
DROP TABLE YYY
END

GO

--REPORT 5
--查看产品中，销售金额高于所有产品平均销售额的产品信息。 

CREATE PROC RP5 AS
BEGIN
SELECT * FROM PRODUCTION.PRODUCT WHERE PRODUCTID IN(
SELECT PRODUCTID FROM SALES.ORDERDETAILS GROUP BY PRODUCTID  HAVING SUM(TOTAL)>(
SELECT SUM(TOTAL)/COUNT(PRODUCTID) FROM  SALES.ORDERDETAILS))
END

GO

--REPORT 6
--查看显示所有年份的销售总额，且希望查看显示每个销售人员所有年份销售总额的报告。此外，经理希望生成一份能够显示每个销售人员每年销售总额的报告

CREATE PROC RP6 AS
BEGIN
CREATE TABLE AAA(
SALESPERSONID CHAR(4),
SALESYEAR INT ,
SUMTOTAL INT
)
DECLARE @SALESPEROSNID CHAR(4)
DECLARE @YEAR INT 
DECLARE @SUMTOTAL INT
DECLARE @COUNT INT
DECLARE @I INT
SET @I=1
SET @SUMTOTAL=0
SELECT  @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
SELECT @COUNT=COUNT(EMPLOYEEID) FROM HUMANRESOURCES.EMPLOYEE WHERE LEFT(EMPLOYEEID,2)='ES'

WHILE(@I<=@COUNT)
BEGIN
IF(@I<10)
SET @SALESPEROSNID='ES0'+CONVERT(CHAR(1),@I)
ELSE
SET @SALESPEROSNID='ES'+CONVERT(CHAR(2),@I)
WHILE (@YEAR<=YEAR(GETDATE()))
BEGIN
;WITH  CTE(SALESPERSONID,SALESOFMONTH,TOTAL) AS(
SELECT SALESPERSONID,LEFT(SALESDATE,4) AS SALESYEAR,SALESOFMONTH AS 'TOTAL' FROM 
SALES.SALESPERSON WHERE SALESPERSONID=@SALESPEROSNID AND LEFT(SALESDATE,4)=@YEAR)
SELECT @SUMTOTAL=SUM(TOTAL) FROM CTE GROUP BY SALESPERSONID
INSERT INTO AAA VALUES (@SALESPEROSNID,@YEAR,@SUMTOTAL)
SET @SUMTOTAL=0
SET @YEAR=@YEAR+1
END
SELECT  @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
SET @I=@I+1
END
SELECT SALESYEAR AS '销售年份',SUM(SUMTOTAL) AS '年销售额' FROM AAA GROUP BY SALESYEAR
SELECT SALESPERSONID AS '销售人员',SALESYEAR AS '销售年份',SUMTOTAL AS '销售额' FROM AAA
DROP TABLE AAA
END

GO

--REPORT 7
--查看每年销售总额，所有年份的销售总额，每个销售人员所有年份的销售总额 

CREATE PROC RP7 AS 
BEGIN
EXEC RP6
END

GO
--REPORT 8
--查看每个销售人员的总销售额，并按照他们的表现排名（销售额最高的排名为 1，然而，如果有两 名销售人员的销售额相同，哪么他们的排名相同。）

CREATE PROC RP8 AS
BEGIN
SELECT SALESPERSONID AS '销售人员',SUM(TOTAL) AS '销售总额' ,'表现排名'= DENSE_RANK() OVER (ORDER BY  SUM(TOTAL) DESC)
FROM SALES.ORDERDETAILS GROUP BY SALESPERSONID 
END
GO

--REPORT 9
--查看一个月中没有任何销售的销售人员的信息 

CREATE PROC RP9 AS
BEGIN
CREATE TABLE HHH(
SID CHAR(4),
SYEAR CHAR(8),
SSUM INT
)
DECLARE @SID CHAR(4)
DECLARE @YEAR INT 
DECLARE @MONTH INT 
DECLARE @TOTAL INT 
DECLARE @COUNT INT 
DECLARE @I INT 
SET @SID='ES01'
SELECT  @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
SELECT @COUNT=COUNT(EMPLOYEEID) FROM HUMANRESOURCES.EMPLOYEE WHERE LEFT(EMPLOYEEID,2)='ES'
SET @MONTH=1
SET @I=1
SET @TOTAL=0
WHILE (@I<@COUNT)
BEGIN
WHILE (@YEAR<YEAR(GETDATE()))
BEGIN
WHILE(@MONTH<10)
BEGIN
SELECT @TOTAL=SALESOFMONTH FROM SALES.SALESPERSON WHERE SALESPERSONID=@SID AND  LEFT(SALESDATE,4)=@YEAR AND RIGHT(SALESDATE,2)=@MONTH
INSERT INTO HHH  VALUES (@SID,(CONVERT(CHAR(4),@YEAR)+'/'+CONVERT(VARCHAR(2),@MONTH)),@TOTAL)
SET @MONTH=@MONTH+1
SET @TOTAL=0
END
WHILE(@MONTH>9 AND @MONTH<13)
BEGIN
SELECT @TOTAL=SALESOFMONTH FROM SALES.SALESPERSON WHERE SALESPERSONID=@SID AND  LEFT(SALESDATE,4)=@YEAR AND RIGHT(SALESDATE,2)=@MONTH
INSERT INTO HHH  VALUES (@SID,(CONVERT(CHAR(4),@YEAR)+'/'+CONVERT(VARCHAR(2),@MONTH)),@TOTAL)
SET @MONTH=@MONTH+1
SET @TOTAL=0
END
SET @YEAR=@YEAR+1
SET @MONTH=1
END
WHILE(@YEAR=YEAR(GETDATE()))
BEGIN
IF(MONTH(GETDATE())<10)
BEGIN
SET @MONTH=1
WHILE(@MONTH<MONTH(GETDATE()))
BEGIN
SELECT @TOTAL=SALESOFMONTH FROM SALES.SALESPERSON WHERE SALESPERSONID=@SID AND  LEFT(SALESDATE,4)=@YEAR AND RIGHT(SALESDATE,2)=@MONTH
INSERT INTO HHH  VALUES (@SID,(CONVERT(CHAR(4),@YEAR)+'/'+CONVERT(VARCHAR(2),@MONTH)),@TOTAL)
SET @MONTH=@MONTH+1
END
SET @YEAR=@YEAR+1
END
IF(MONTH(GETDATE())>10)
BEGIN
SET @MONTH=1
WHILE(@MONTH<10)
BEGIN
SELECT @TOTAL=SALESOFMONTH FROM SALES.SALESPERSON WHERE SALESPERSONID=@SID AND  LEFT(SALESDATE,4)=@YEAR AND RIGHT(SALESDATE,2)=@MONTH
INSERT INTO HHH  VALUES (@SID,(CONVERT(CHAR(4),@YEAR)+'/'+CONVERT(VARCHAR(2),@MONTH)),@TOTAL)
SET @MONTH=@MONTH+1
END
WHILE(@MONTH>9)
BEGIN
SELECT @TOTAL=SALESOFMONTH FROM SALES.SALESPERSON WHERE SALESPERSONID=@SID AND  LEFT(SALESDATE,4)=@YEAR AND RIGHT(SALESDATE,3)=@MONTH
INSERT INTO HHH  VALUES (@SID,(CONVERT(CHAR(4),@YEAR)+'/'+CONVERT(VARCHAR(2),@MONTH)),@TOTAL)
SET @MONTH=@MONTH+1
END
SET @YEAR=@YEAR+1
END
END
SET @I=@I+1
SELECT  @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
IF(@I<10)
BEGIN
SET @SID='ES0'+CONVERT(CHAR(1),@I)
END
ELSE
BEGIN
SET @SID='ES'+CONVERT(CHAR(2),@I)
END
END
SELECT SID AS '销售人员编号',SYEAR AS '销售年月',SSUM AS '销售金额' FROM  HHH WHERE SSUM=0
DROP TABLE HHH
END

GO

--REPORT 10
--查看在一年中没有任何销售的销售人员的信息 

CREATE PROC RP10 AS
BEGIN
CREATE TABLE AAA(
SALESPERSONID CHAR(4),
SALESYEAR INT ,
SUMTOTAL INT
)
DECLARE @SALESPEROSNID CHAR(4)
DECLARE @YEAR INT 
DECLARE @SUMTOTAL INT
DECLARE @COUNT INT
DECLARE @I INT
SET @I=1
SET @SUMTOTAL=0
SELECT  @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
SELECT @COUNT=COUNT(EMPLOYEEID) FROM HUMANRESOURCES.EMPLOYEE WHERE LEFT(EMPLOYEEID,2)='ES'
WHILE(@I<=@COUNT)
BEGIN
IF(@I<10)
SET @SALESPEROSNID='ES0'+CONVERT(CHAR(1),@I)
ELSE
SET @SALESPEROSNID='ES'+CONVERT(CHAR(2),@I)
WHILE (@YEAR<=YEAR(GETDATE()))
BEGIN
;WITH  CTE(SALESPERSONID,SALESOFMONTH,TOTAL) AS(
SELECT SALESPERSONID,LEFT(SALESDATE,4) AS SALESYEAR,SALESOFMONTH AS 'TOTAL' FROM 
SALES.SALESPERSON WHERE SALESPERSONID=@SALESPEROSNID AND LEFT(SALESDATE,4)=@YEAR)
SELECT @SUMTOTAL=SUM(TOTAL) FROM CTE GROUP BY SALESPERSONID
INSERT INTO AAA VALUES (@SALESPEROSNID,@YEAR,@SUMTOTAL)
SET @SUMTOTAL=0
SET @YEAR=@YEAR+1
END
SELECT  @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
SET @I=@I+1
END
SELECT SALESPERSONID AS '销售人员',SALESYEAR AS '销售年份',SUMTOTAL AS '销售额' FROM AAA WHERE SUMTOTAL=0
DROP TABLE AAA
END

GO

--REPORT 11
--查看每个客户对应的销售报告，并且按照年订单量排名。（订单最多的客户排名为 1，然而，如果 两名客户的订单量相同，则给出相同的排名） 

CREATE PROC RP11 AS 
BEGIN
CREATE TABLE SSS(
CID CHAR(4),
DYEAR INT,
TOTAL INT 
)
DECLARE @CID CHAR(4)
DECLARE @YEAR INT 
DECLARE @COUNT INT
DECLARE @I INT
DECLARE @TOTAL INT 
SELECT  @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
SET @CID='C001'
SET @I=1
SELECT @COUNT=COUNT(CUSTOMERID) FROM SALES.CUSTOMER

WHILE (@I<=@COUNT)
BEGIN
WHILE(@YEAR<=YEAR(GETDATE()))
BEGIN
;WITH CCC(TOTAL) AS
(SELECT TOTAL FROM SALES.ORDERDETAILS WHERE CUSTOMERID=@CID  AND YEAR(ORDERDATE)=@YEAR)
SELECT @TOTAL=SUM(TOTAL) FROM CCC
INSERT INTO SSS VALUES(@CID,@YEAR,@TOTAL)
SET @YEAR=@YEAR+1
END
SELECT  @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS
SET @I=@I+1
IF(@I<10)
SET @CID='C00'+CONVERT(CHAR(1),@I)
IF(@I>9 AND @I<=99)
SET @CID='C0'+CONVERT(CHAR(2),@I)
IF(@I>99 AND @I<999)
SET @CID='C'+CONVERT(CHAR(3),@I)
END
SELECT CID AS '客户编号',DYEAR AS '订单年份',TOTAL AS '订单总额','订单排名'=DENSE_RANK() OVER (ORDER BY TOTAL DESC) FROM SSS
DROP TABLE SSS
END

GO


--REPORT 12
--查看一年内每月的销售总额 

CREATE PROC RP12 AS
BEGIN
CREATE TABLE CCC(
SALESDATE VARCHAR(8),
SALESMOUNT INT 
)
DECLARE @YEAR INT 
DECLARE @MONTH INT 
DECLARE @SUM INT
SELECT  @YEAR=MIN(YEAR(ORDERDATE)) FROM SALES.ORDERDETAILS 
SELECT @MONTH=1
WHILE(@YEAR<YEAR(GETDATE()))
BEGIN
WHILE(@MONTH<=12)
BEGIN
SELECT @SUM=SUM(TOTAL) FROM SALES.ORDERDETAILS WHERE YEAR(ORDERDATE)=@YEAR AND MONTH(ORDERDATE)=@MONTH
INSERT INTO CCC VALUES((CONVERT(CHAR(4),@YEAR)+'/'+CONVERT(VARCHAR(2),@MONTH)),@SUM)
SET @MONTH=@MONTH+1
END
SET @YEAR=@YEAR+1
SET @MONTH=1
END
IF (@YEAR=YEAR(GETDATE()))
SET @MONTH=1
BEGIN
WHILE(@MONTH<MONTH(GETDATE()))
BEGIN
SELECT @SUM=SUM(TOTAL) FROM SALES.ORDERDETAILS WHERE YEAR(ORDERDATE)=@YEAR AND MONTH(ORDERDATE)=@MONTH
INSERT INTO CCC VALUES((CONVERT(CHAR(4),@YEAR)+'/'+CONVERT(VARCHAR(2),@MONTH)),@SUM)
SET @MONTH=@MONTH+1
END
END
SELECT SALESDATE AS '销售年月',SALESMOUNT AS '月销售额' FROM CCC
DROP TABLE CCC
END

GO

 CREATE PROC RP2_1 AS
 BEGIN
 SELECT P.PRODUCTID AS '销售额最高的产品编号',P.PRODUCTNAME AS '产品名称',S.SUMQUANTITY AS '销售总量',S.SUMTOTAL AS '销售总额' FROM 
(SELECT  PRODUCTID,PRODUCTNAME  FROM PRODUCTION.PRODUCT)  AS P
INNER JOIN
(SELECT TOP 1 S.PRODUCTID  ,(SUM(S.TOTAL)) AS SUMTOTAL ,SUM(S.QUANTITY) AS SUMQUANTITY FROM SALES.ORDERDETAILS  S JOIN PRODUCTION.PRODUCT P ON S.PRODUCTID=P.PRODUCTID  GROUP BY S.PRODUCTID ORDER BY SUM(TOTAL) DESC)
 AS S
 ON S.PRODUCTID=P.PRODUCTID
 END
 GO

 CREATE PROC RP2_2 AS
 BEGIN
 SELECT P.PRODUCTID AS '销售额最高的产品编号',P.PRODUCTNAME AS '产品名称',S.SUMQUANTITY AS '销售总量',S.SUMTOTAL AS '销售总额' FROM 
(SELECT  PRODUCTID,PRODUCTNAME  FROM PRODUCTION.PRODUCT)  AS P
INNER JOIN
(SELECT TOP 1 S.PRODUCTID  ,(SUM(S.TOTAL)) AS SUMTOTAL ,SUM(S.QUANTITY) AS SUMQUANTITY FROM SALES.ORDERDETAILS  S JOIN PRODUCTION.PRODUCT P ON S.PRODUCTID=P.PRODUCTID  GROUP BY S.PRODUCTID ORDER BY SUM(TOTAL) DESC)
 AS S
 ON S.PRODUCTID=P.PRODUCTID
 END
GO

CREATE PROC RP4_1
AS BEGIN
SELECT  PRODUCTID AS '产品编号',YEAR(ORDERDATE) AS '销售年份',MONTH(ORDERDATE) AS '销售月份',SUM(TOTAL) AS '销售总额'  FROM SALES.ORDERDETAILS GROUP BY PRODUCTID,YEAR(ORDERDATE),MONTH(ORDERDATE)
END
GO

CREATE PROC RP6_1
AS BEGIN
SELECT YEAR(ORDERDATE) AS '销售年份',SUM(TOTAL) AS '销售总额' FROM SALES.ORDERDETAILS GROUP BY YEAR(ORDERDATE)
END
GO


CREATE PROC RP7_1
AS BEGIN
SELECT SALESPERSONID, YEAR(ORDERDATE) AS '销售年份',SUM(TOTAL) AS '销售总额' FROM SALES.ORDERDETAILS GROUP BY YEAR(ORDERDATE),SALESPERSONID
END
GO

CREATE PROC RP9_1 @YEAR INT,@MONTH INT
AS BEGIN
SELECT  distinct(SALESPERSONID)  FROM SALES.SALESPERSON WHERE SALESPERSONID NOT IN (SELECT SALESPERSONID FROM SALES.ORDERDETAILS WHERE YEAR(ORDERDATE)=@YEAR AND MONTH(ORDERDATE)=@MONTH )
END
GO

CREATE PROC RP10_1 @YEAR INT
AS BEGIN
SELECT  distinct(SALESPERSONID)  FROM SALES.SALESPERSON WHERE SALESPERSONID NOT IN (SELECT SALESPERSONID FROM SALES.ORDERDETAILS WHERE YEAR(ORDERDATE)=@YEAR )
END
GO

CREATE PROC RP11_1
AS BEGIN
SELECT CUSTOMERID AS '客户编号',YEAR(ORDERDATE) AS '订单年份',SUM(TOTAL) AS '订单总额','订单量排名'= DENSE_RANK() OVER (ORDER BY  SUM(TOTAL) DESC)  FROM SALES.ORDERDETAILS GROUP BY CUSTOMERID,YEAR(ORDERDATE)
END
GO

CREATE PROC RP12_1 @YEAR INT
AS BEGIN
SELECT MONTH(ORDERDATE),YEAR(ORDERDATE), SUM(TOTAL) FROM SALES.ORDERDETAILS GROUP BY MONTH(ORDERDATE),YEAR(ORDERDATE) HAVING YEAR(ORDERDATE)=@YEAR
END
GO

--------------------------------查询所有表--------------------------------------------

SELECT * FROM HUMANRESOURCES.EMPLOYEE
SELECT * FROM HUMANRESOURCES.DEPARTMENT
SELECT * FROM HUMANRESOURCES.EMPLOYEEHISTORY
SELECT * FROM HUMANRESOURCES.EMPLOYEEPAYHISTORY
SELECT * FROM PRODUCTION.PRODUCT
SELECT * FROM PRODUCTION.CATEGORY
SELECT * FROM PRODUCTION.SUPPER
SELECT * FROM PRODUCTION.INVENTORY
SELECT * FROM PRODUCTION.PURCHASE
SELECT * FROM SALES.ORDERDETAILS
SELECT * FROM SALES.CUSTOMER
SELECT * FROM SALES.REGION
SELECT * FROM SALES.REGIONSALES
SELECT * FROM SALES.SALESPERSON
SELECT * FROM SALES.PAYMENTMODE

GO

--------------------------------执行所有存储过程--------------------------------------------
EXEC RP1
EXEC RP2
EXEC RP3 2013,03
EXEC RP4
EXEC RP5
EXEC RP6
EXEC RP7
EXEC RP8
EXEC RP9
EXEC RP10
EXEC RP12

GO

-------------------------------------END------------------------------------------------------